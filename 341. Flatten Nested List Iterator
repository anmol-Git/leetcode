/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return 
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return empty list if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {

    List<Integer> res = null;
    int curr = 0;

    public NestedIterator(List<NestedInteger> nestedList) {
        res =  new ArrayList<>();
        solve(nestedList, 0);
    }

    void solve(List<NestedInteger> list, int ind) {

        if(ind == list.size()) return;

        NestedInteger ni = list.get(ind);

        if(ni.isInteger()) {
            res.add(ni.getInteger());
            solve(list, ind + 1);
        }

        else {
            solve(ni.getList(), 0);
            solve(list, ind + 1);
        }
     }

    @Override
    public Integer next() {
        return res.get(curr++);
    }

    @Override
    public boolean hasNext() {
        return curr < res.size();
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
