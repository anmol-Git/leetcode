/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int n = mountainArr.length();

        int peak = peak(mountainArr, target, n - 1);

        int firstHalf = binarySearch(mountainArr, target, peak);
        int secondHalf = reverseBinarySearch(mountainArr, target,peak + 1, n - 1);

        if(firstHalf != -1) return firstHalf;

        return secondHalf; 
    }

    int peak(MountainArray marr, int target, int len) {

        int start = 0;

        int end = len;

        while(start<end){
            int mid = start + (end - start)/2;
            if(marr.get(mid) > marr.get(mid+1)) end = mid;
            else start = mid + 1;
        }

        return start;

    }

    int binarySearch(MountainArray arr, int target, int len) {

        int start = 0;
        int end = len;

        while(start <= end) {
            int mid = start + (end - start)/2;

            if(arr.get(mid) < target) start = mid + 1;
            else if(arr.get(mid) > target) end = mid - 1;
            else return mid;
        }

        return -1;
    }


    int reverseBinarySearch(MountainArray arr, int target, int start, int len) {

        int end = len;

        while(start <= end) {
            int mid = start + (end - start)/2;

            if(arr.get(mid) > target) start = mid + 1;
            else if(arr.get(mid) < target) end = mid - 1;
            else return mid;
        }

        return -1;
    }
}
