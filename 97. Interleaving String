class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        int n = s1.length();
        int m = s2.length();

        if(n + m != s3.length()) return false;

        boolean[][] dp = new boolean[n + 1][m + 1];

        dp[n][m] = true;

        for(int i = n; i >= 0; i--) {

            for(int j = m; j >= 0; j--) {

                if(i < n && s3.charAt(i + j) == s1.charAt(i) && dp[i + 1][j]) dp[i][j] = true;
                if(j < m && s3.charAt(i + j) == s2.charAt(j) && dp[i][j + 1]) dp[i][j] = true;

            }
        }

        return dp[0][0];
        
        
    }


    // boolean solve(String s1, String s2, String s3, int n, int m, int i, int j, int[][] dp) {

    //     if(i == n && j == m) {
    //         return true;
    //     }

    //     if(dp[i][j] != -1) return dp[i][j] == 1 ? true : false;

    //     if(i < n && s3.charAt(i + j) == s1.charAt(i) && solve(s1, s2, s3, n, m, i + 1, j, dp)) {
    //         dp[i][j] = 1;
    //         return true;
    //     }

    //     if(j < m && s3.charAt(i + j) == s2.charAt(j) && solve(s1, s2, s3, n, m, i, j + 1, dp)) {
    //         dp[i][j] = 1;
    //         return true;
    //     }

    //     dp[i][j] = 0;
    //     return false;
    // }
}
