// optimal linear time & space solution
class Solution {
    public int minOperations(int[] nums, int x) {
        int n = nums.length;

        int sum = 0;

        Map<Integer, Integer> prefix = new HashMap<>();
        prefix.put(0, 0);
        for(int i = 0; i < n; i++) {
            sum += nums[i];
            prefix.put(sum, i);
        }

        int longest = 0;
        sum = sum - x;
        int val = 0;

        if(sum < 0) return -1;

        for(int i = 0; i < n; i++) {
            val += nums[i];
            
            if(prefix.containsKey(val - sum)) {

                if(val - sum == 0)
                longest = Math.max(longest, i - prefix.get(val - sum) + 1);

                else longest = Math.max(longest, i - prefix.get(val- sum));
            }
        }

        return longest == 0 ? (sum == 0 ? n : -1 ) : n - longest;
    }
}

// top down memoization O(n2) just for refrence will not pass in leetcode

class Solution {
    public int minOperations(int[] nums, int x) {
        int n = nums.length;
        int[][] dp = new int[n + 1][n + 1];
        for(int[] i : dp) Arrays.fill(i, -1);
        boolean flag = false;
        int count = 0;
        int ans  = solve(nums, x, 0, n - 1, dp, count);
        
        return ans == Integer.MAX_VALUE ? -1 : ans;
    }

    int solve(int[] nums, int x, int start, int end, int[][] dp, int count) {
        if(x == 0) {
             return count;
        }
        if(start > end ||  x < 0) return Integer.MAX_VALUE;

        if(dp[start][end] != -1) return dp[start][end];
    
      
        int pickingleft =  solve(nums, x - nums[start], start + 1, end, dp, count + 1);
        
        int pickingright =  solve(nums, x - nums[end], start, end - 1, dp, count + 1);

        return dp[start][end] =  Math.min(pickingleft, pickingright);
    }
}
